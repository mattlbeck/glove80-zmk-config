/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

//////////////////////////////////////////////////////////////////////////
//
// Mouse keys (control mouse via keyboard) -- requires PR23 beta firmware:
// select "community.pr23.mouse-keys" from the drop-down menu located at
// Glove80 Layout Editor > Settings > Advanced Settings > Firmware Version
//
// - https://github.com/moergo-sc/zmk/pull/23
// - https://gist.github.com/krissen/dd27082e7ab0575619c7a31f4d2ec7ae
// - https://github.com/zmkfirmware/zmk/compare/main...urob:zmk:mouse-3.2
//
//////////////////////////////////////////////////////////////////////////

//
// ENABLE_MOUSE_KEYS activates support for mouse keys if defined; otherwise
// mouse keys are deactivated (they're transformed into no-ops) by default.
// To use this feature, uncomment the following line (remove leading "//").
//
//#define ENABLE_MOUSE_KEYS // requires PR23 beta firmware: see note above

//
// MOUSE_MOTION_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#define MOUSE_MOTION_DELAY 0

//
// MOUSE_MOTION_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#define MOUSE_MOTION_ACCELERATION_EXPONENT 1

//
// MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#define MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED 300

//
// MOUSE_MOTION_MAXIMUM_SPEED defines how quickly the mouse pointer can move.
//
#define MOUSE_MOTION_MAXIMUM_SPEED 1000

//
// MOUSE_SCROLL_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#define MOUSE_SCROLL_DELAY 0

//
// MOUSE_SCROLL_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0

//
// MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 450

#define ZMK_MOUSE_DEFAULT_MOVE_VAL MOUSE_MOTION_MAXIMUM_SPEED
#define ZMK_MOUSE_DEFAULT_SCRL_VAL MOUSE_SCROLL_MAXIMUM_SPEED
#include <dt-bindings/zmk/mouse.h>
&mmv {
    delay-ms = <MOUSE_MOTION_DELAY>;
    acceleration-exponent = <MOUSE_MOTION_ACCELERATION_EXPONENT>;
    time-to-max-speed-ms = <MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED>;
};
&msc {
    delay-ms = <MOUSE_SCROLL_DELAY>;
    acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
    time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
};


/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 3>, <&to 3>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        engrammer {
            bindings = <
&kp F1      &kp F2      &kp F3          &kp F4       &kp F5                                                                                                                             &kp F6                &kp F7       &kp F8      &kp F9                 &kp F10
&kp N1      &kp N2      &kp N3          &kp N4       &kp N5            &kp EQUAL                                                                                         &kp BSLH       &kp N6                &kp N7       &kp N8      &kp N9                 &kp N0
&none       &kp B       &kp Y           &kp O        &kp U             &kp SQT                                                                                           &kp SEMICOLON  &kp L                 &kp D        &kp W       &kp V                  &kp Z
&caps_word  &mt LCMD C  &mt LEFT_ALT I  &mt LCTRL E  &mt LEFT_SHIFT A  &kp COMMA                                                                                         &kp PERIOD     &mt RIGHT_SHIFT H     &mt RCTRL T  &mt RALT S  &mt RGUI N             &kp Q
&none       &kp G       &kp X           &kp J        &kp K             &kp MINUS  &lt 1 ENTER  &kp UP           &kp DOWN     &kp LG(Z)      &kp LS(LG(Z))  &lt 1 ESCAPE  &kp SLASH      &kp R                 &kp M        &kp F       &kp P                  &none
&magic 6 0  &kp HOME    &kp PG_UP       &kp PG_DN    &kp END                      &lt 4 SPACE  &lt 2 BACKSPACE  &kp LG(TAB)  &kp LG(SPACE)  &kp DEL        &lt 3 TAB                    &kp LEFT_PARENTHESIS  &kp LBKT     &kp RBKT    &kp RIGHT_PARENTHESIS  &magic 6 0
            >;
        };

        sympad {
            bindings = <
&none  &none        &none            &none            &none                                                                                                                      &none                 &none     &none        &none                  &none
&none  &none        &none            &none            &none           &none                                                                                       &kp CARET      &none                 &kp N7    &kp N8       &kp N9                 &none
&none  &kp CARET    &kp TILDE        &kp GRAVE        &kp DQT         &kp SQT                                                                                     &kp SEMICOLON  &kp COLON             &kp N4    &kp N5       &kp N6                 &none
&none  &kp HASH     &kp PLUS         &kp EQUAL        &kp LESS_THAN   &kp COMMA                                                                                   &kp PERIOD     &kp GREATER_THAN      &kp N1    &kp N2       &kp N3                 &none
&none  &kp AT_SIGN  &kp EXCLAMATION  &kp DOLLAR       &kp UNDERSCORE  &kp MINUS  &kp ENTER  &kp UP_ARROW   &kp DOWN     &kp LG(Z)      &kp LS(LG(Z))  &kp ESCAPE  &kp SLASH      &kp QUESTION          &kp N0    &kp PERCENT  &kp ASTERISK           &none
&none  &kp PIPE     &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp BACKSLASH              &kp SPACE  &kp BACKSPACE  &kp LG(TAB)  &kp LG(SPACE)  &kp DEL        &kp TAB                    &kp LEFT_PARENTHESIS  &kp LBKT  &kp RBKT     &kp RIGHT_PARENTHESIS  &kp N0
            >;
        };

        cursor {
            bindings = <
&none  &none          &none          &none      &none                                                                                                     &none             &none             &none              &none              &none
&none  &none          &none          &none      &none      &none                                                                               &none      &none             &none             &none              &none              &none
&none  &none          &none          &none      &none      &kp LG(X)                                                                           &kp LG(X)  &kp LS(LG(LEFT))  &kp LS(LA(LEFT))  &kp LS(LA(RIGHT))  &kp LS(LG(RIGHT))  &none
&none  &kp LGUI       &kp LALT       &kp LCTRL  &kp LSHFT  &kp LG(C)                                                                           &kp LG(C)  &kp LEFT          &kp UP            &kp DOWN           &kp RIGHT          &none
&none  &kp LS(LG(G))  &kp LS(LG(F))  &kp LG(F)  &kp LG(G)  &kp LG(V)  &kp RET    &none     &none        &kp LG(Z)      &kp LS(LG(Z))  &kp ESC  &kp LG(V)  &kp LG(LEFT)      &kp LA(LEFT)      &kp LA(RIGHT)      &kp LG(RIGHT)      &none
&none  &kp HOME       &kp PG_UP      &kp PG_DN  &kp END               &kp SPACE  &kp BSPC  &kp LG(TAB)  &kp LG(SPACE)  &kp LA(DEL)    &kp TAB             &none             &none             &none              &none              &none
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans          &trans          &trans                                                                                                   &trans     &trans     &trans    &trans    &trans
&trans  &trans  &trans          &trans          &trans           &trans                                                                       &trans     &trans     &trans     &trans    &trans    &trans
&trans  &trans  &kp LC(DOWN)    &mmv MOVE_UP    &kp LC(UP)       &kp LG(X)                                                                    &kp LG(X)  &trans     &trans     &trans    &trans    &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp LG(C)                                                                    &kp LG(C)  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &trans  &trans          &msc SCRL_UP    &msc SCRL_DOWN   &kp LG(V)  &mkp MCLK  &trans     &trans       &trans         &trans  &trans  &kp LG(V)  &trans     &trans     &trans    &trans    &trans
&trans  &trans  &trans          &trans          &trans                      &mkp LCLK  &mkp RCLK  &kp LG(TAB)  &kp LG(SPACE)  &trans  &trans             &trans     &trans     &trans    &trans    &trans
            >;
        };

        function {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                                   &trans             &trans                 &trans                  &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                                        &none              &kp LC(LS(LA(H)))  &kp LC(LS(LA(COMMA)))  &kp LC(LS(LA(PERIOD)))  &none              &none
&none   &none   &none   &none   &none   &none                                                                         &kp LC(LS(LA(Y)))  &kp LC(LS(LA(E)))  &kp LC(LS(LA(N)))      &kp LC(LS(LA(I)))       &kp LC(LS(LA(L)))  &none
&none   &none   &none   &none   &none   &none                                                                         &kp LG(GRAVE)      &kp LC(LS(TAB))    &kp LG(W)              &kp LC(TAB)             &none              &none
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans         &trans  &kp C_PLAY_PAUSE  &trans             &trans             &kp LG(LS(W))          &trans                  &trans             &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp LG(TAB)  &kp LG(SPACE)  &trans  &trans                               &trans             &trans                 &trans                  &trans             &trans
            >;
        };

        lower {
            bindings = <
&none  &none  &none  &none  &none                                                                        &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                                                          &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                                                          &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                                                          &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none        &none          &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none         &none  &none  &kp LG(TAB)  &kp LG(SPACE)  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
