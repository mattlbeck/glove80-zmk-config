/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

//////////////////////////////////////////////////////////////////////////
//
// Mouse keys (control mouse via keyboard) -- requires PR23 beta firmware:
// select "community.pr23.mouse-keys" from the drop-down menu located at
// Glove80 Layout Editor > Settings > Advanced Settings > Firmware Version
//
// - https://github.com/moergo-sc/zmk/pull/23
// - https://gist.github.com/krissen/dd27082e7ab0575619c7a31f4d2ec7ae
// - https://github.com/zmkfirmware/zmk/compare/main...urob:zmk:mouse-3.2
//
//////////////////////////////////////////////////////////////////////////
//
// ENABLE_MOUSE_KEYS activates support for mouse keys if defined; otherwise
// mouse keys are deactivated (they're transformed into no-ops) by default.
// To use this feature, uncomment the following line (remove leading "//").
//
//#define ENABLE_MOUSE_KEYS // requires PR23 beta firmware: see note above
//
// MOUSE_MOTION_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//

#define MOUSE_MOTION_DELAY 0

//
// MOUSE_MOTION_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//

#define MOUSE_MOTION_ACCELERATION_EXPONENT 1

//
// MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//

#define MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED 300

//
// MOUSE_MOTION_MAXIMUM_SPEED defines how quickly the mouse pointer can move.
//

#define MOUSE_MOTION_MAXIMUM_SPEED 1200

//
// MOUSE_SCROLL_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//

#define MOUSE_SCROLL_DELAY 0

// 

#define MOUSE_SCROLL_MAXIMUM_SPEED 20

//
// MOUSE_SCROLL_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//

#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0

//
// MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//

#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 450
#define ZMK_MOUSE_DEFAULT_MOVE_VAL MOUSE_MOTION_MAXIMUM_SPEED
#define ZMK_MOUSE_DEFAULT_SCRL_VAL MOUSE_SCROLL_MAXIMUM_SPEED

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&mmv {
    delay-ms = <MOUSE_MOTION_DELAY>;
    acceleration-exponent = <MOUSE_MOTION_ACCELERATION_EXPONENT>;
    time-to-max-speed-ms = <MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED>;
};

&msc {
    delay-ms = <MOUSE_SCROLL_DELAY>;
    acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
    time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
};

&mt { flavor = "balanced"; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 3>, <&to 3>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak-dh {
            bindings = <
&kp F1             &kp F2           &kp F3                &kp F4                 &kp F5                                                                                                                         &kp F6             &kp F7            &kp F8             &kp F9               &kp F10
&kp LC(LG(LS(T)))  &kp N1           &kp N2                &kp N3                 &kp N4            &kp N5                                                                                               &kp N6  &kp N7             &kp N8            &kp N9             &kp N0               &trans
&trans             &kp Q            &kp W                 &kp F                  &kp P             &kp B                                                                                                &kp J   &kp L              &kp U             &kp Y              &kp SEMI             &none
&caps_word         &mt LCTRL A      &mt LEFT_ALT R        &mt LGUI S             &mt LEFT_SHIFT T  &kp G                                                                                                &kp M   &mt RIGHT_SHIFT N  &mt RGUI E        &mt RALT I         &mt RCTRL O          &trans
&tog 3             &kp Z            &kp X                 &kp C                  &kp D             &kp V   &lt 1 BACKSPACE  &kp PAGE_UP  &kp PAGE_DOWN  &kp LG(Z)      &kp LS(LC(LA(H)))  &lt 1 DELETE  &kp K   &kp H              &lt 3 COMMA       &kp DOT            &mt BACKSLASH SLASH  &trans
&magic 5 0         &kp EXCLAMATION  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE            &lt 2 SPACE      &lt 4 ENTER  &kp LG(TAB)    &kp LG(SPACE)  &kp ESCAPE         &lt 3 TAB             &kp MINUS          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp QUESTION         &magic 5 0
            >;
        };

        sympad {
            bindings = <
&none  &none            &none                 &none                  &none                                                                                                                                &none      &none             &none              &none                       &none
&none  &none            &none                 &none                  &none           &kp LESS_THAN                                                                                      &kp GREATER_THAN  &kp N7     &kp N8            &kp N9             &none                       &none
&none  &none            &kp TILDE             &kp SQT                &kp DQT         &kp GRAVE                                                                                          &kp PLUS          &kp N4     &kp N5            &kp N6             &none                       &none
&none  &kp AMPS         &kp HASH              &kp EXCLAMATION        &kp COLON       &kp AT_SIGN                                                                                        &kp EQUAL         &kp N1     &kp N2            &kp N3             &kp PERCENT                 &none
&none  &kp CARET        &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOLLAR      &kp PIPE       &kp BACKSPACE  &kp UP_ARROW  &kp DOWN     &kp LG(Z)      &kp LS(LG(Z))  &kp DELETE  &kp ASTERISK      &kp N0     &kp COMMA         &kp PERIOD         &mt NON_US_BACKSLASH SLASH  &none
&none  &kp EXCLAMATION  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE                 &kp SPACE      &kp ENTER     &kp LG(TAB)  &kp LG(SPACE)  &kp ESCAPE     &kp TAB                       &kp MINUS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp QUESTION                &none
            >;
        };

        cursor {
            bindings = <
&none  &none     &none           &none           &none                                                                                                                  &none                       &none                &none                  &none              &none
&none  &none     &none           &none           &none          &none                                                                                        &none      &none                       &none                &none                  &none              &none
&none  &none     &kp LG(LEFT)    &kp UP_ARROW    &kp RG(RIGHT)  &kp LG(X)                                                                                    &kp LG(X)  &none                       &none                &none                  &none              &none
&none  &none     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT      &kp LG(C)                                                                                    &kp LG(C)  &mt LEFT_SHIFT LC(LS(TAB))  &mt RIGHT_GUI LG(W)  &mt RIGHT_ALT LC(TAB)  &kp RIGHT_CONTROL  &none
&none  &none     &kp LA(LEFT)    &kp LG(F)       &kp LA(RIGHT)  &kp LG(V)  &kp BACKSPACE  &none      &none        &kp LG(Z)      &kp LS(LG(Z))   &kp DELETE  &kp LG(V)  &none                       &none                &none                  &none              &none
&none  &kp HOME  &kp PG_UP       &kp PG_DN       &kp END                   &kp SPACE      &kp ENTER  &kp LG(TAB)  &kp LG(SPACE)  &kp LA(ESCAPE)  &kp TAB                &none                       &none                &none                  &none              &none
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans             &trans          &trans                                                                                                     &trans                   &trans                 &trans                  &trans    &trans
&trans  &trans  &trans             &trans          &trans             &trans                                                                       &trans     &trans                   &trans                 &trans                  &trans    &trans
&trans  &trans  &kp LC(LS(LA(E)))  &mmv MOVE_UP    &kp LC(LS(LA(N)))  &kp LG(X)                                                                    &kp LG(X)  &trans                   &trans                 &trans                  &trans    &trans
&trans  &trans  &mmv MOVE_LEFT     &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &kp LG(C)                                                                    &kp LG(C)  &mt RSHFT LC(LS(LA(Y)))  &kp RGUI               &mt RALT LC(LS(LA(L)))  &kp RALT  &trans
&trans  &trans  &trans             &msc SCRL_UP    &msc SCRL_DOWN     &kp LG(V)  &mkp MCLK  &trans     &trans       &trans         &trans  &trans  &kp LG(V)  &kp LC(LS(LA(H)))        &kp LC(LS(LA(COMMA)))  &kp LC(LS(LA(PERIOD)))  &trans    &trans
&trans  &trans  &trans             &kp LC(DOWN)    &kp LC(UP)                    &mkp LCLK  &mkp RCLK  &kp LG(TAB)  &kp LG(SPACE)  &trans  &trans             &trans                   &trans                 &trans                  &trans    &trans
            >;
        };

        function {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                                         &trans             &trans                 &trans                  &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                                              &none              &kp LC(LS(LA(H)))  &kp LC(LS(LA(COMMA)))  &kp LC(LS(LA(PERIOD)))  &none              &none
&none   &none   &none   &none   &none   &none                                                                               &kp LC(LS(LA(Y)))  &kp LC(LS(LA(E)))  &kp LC(LS(LA(N)))      &kp LC(LS(LA(I)))       &kp LC(LS(LA(L)))  &none
&none   &none   &none   &none   &none   &none                                                                               &kp LG(GRAVE)      &kp LC(LS(TAB))    &kp LG(W)              &kp LC(TAB)             &none              &none
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans         &trans        &kp C_PLAY_PAUSE  &trans             &trans             &kp LG(LS(T))          &trans                  &trans             &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp LG(TAB)  &kp LG(SPACE)  &kp C_VOL_DN  &kp C_VOL_UP                         &trans             &trans                 &trans                  &trans             &trans
            >;
        };

        magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                               &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                                       &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                             &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                             &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none            &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &rgb_ug RGB_TOG         &none  &none  &none  &none  &none
            >;
        };
    };
};
